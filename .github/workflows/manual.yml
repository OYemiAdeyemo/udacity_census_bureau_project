# Workflow to ensure whenever a Github PR is submitted, 
# a JIRA ticket gets created automatically. 
name: Manual Workflow

# Controls when the action will run. 
on:
  # Triggers the workflow on pull request events but only for the master branch
  pull_request_target:
    types: [opened, reopened]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test-transition-issue:
    name: Convert Github Issue to Jira Issue
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Login
      uses: atlassian/gajira-login@master
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        
    - name: Create NEW JIRA ticket
      id: create
      uses: atlassian/gajira-create@master
      with:
        project: CONUPDATE
        issuetype: Task
        summary: |
          Github PR | Repo: ${{ github.repository }}  | PR# ${{github.event.number}}
        description: |
           Repo link: https://github.com/${{ github.repository }}   
           PR no. ${{ github.event.pull_request.number }} 
           PR title: ${{ github.event.pull_request.title }}  
           PR description: ${{ github.event.pull_request.description }}  
           In addition, please resolve other issues, if any. 
        fields: '{"components": [{"name":"nd0821 - ML DevOpsEngineer ND"}], "customfield_16449":"https://classroom.udacity.com/", "customfield_16450":"Resolve the PR", "labels": ["github"], "priority":{"id": "4"}}'

    - name: Log created issue
      run: echo "Issue ${{ steps.create.outputs.issue }} was created"


#name: CI Pipeline
#
#on:
#  push:
#    branches: [ main ]
#  pull_request:
#    branches: [ main ]
#jobs:
#  test:
#    runs-on: ubuntu-latest
#
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#
#    - name: Set up Python
#      uses: actions/setup-python@v5
#      with:
#        python-version: '3.10'  # Change this to your local Python version
#
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install -r requirements.txt
#        pip install flake8 pytest dvc[s3]
#
#    - name: Lint with flake8
#      run: |
#        flake8 .
#
#    - name: Run tests
#      run: |
#        pytest
#
#    - name: Configure AWS Credentials
#      uses: aws-actions/configure-aws-credentials@v4
#      with:
#        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        aws-region: us-east-1  # or your preferred region
#
#    - name: Set up DVC
#      uses: iterative/setup-dvc@v1
#
#    - name: DVC Pull
#      run: |
#        dvc pull
#


name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Run tests
      run: |
        PYTHONPATH=. pytest tests/

    - name: Save artifacts (optional)
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: model-artifacts
        path: |
          model/random_forest.joblib
          model/encoder.joblib
          model/label_binarizer.joblib
